from typing import Any, Optional


class JsonLdError(Exception):
    details: Any
    code: str
    cause: Any
    causeTrace: Any

    def __init__(
        self,
        message: str,
        code: Optional[str],
        cause: Optional[Exception],
        **kwargs: Any
    ) -> None: ...


class JsonLdException(JsonLdError):
    type: str


class JsonLdSyntaxError(JsonLdException):
    def __init__(self, message: Optional[Any], **kwargs: Any) -> None: ...


class CompactError(JsonLdException): ...
class ContextUrlError(JsonLdException): ...
class CyclicalContext(JsonLdException): ...
class FlattenError(JsonLdException): ...
class FrameError(JsonLdException): ...
class InvalidJsonLiteral(JsonLdException, ValueError): ...
class InvalidUrl(JsonLdException): ...
class LoadDocumentError(JsonLdException): ...
class NormalizeError(JsonLdException): ...
class NullRemoteDocument(JsonLdException): ...
class ParseError(JsonLdException): ...
class ProcessingModeConflict(JsonLdException): ...
class RdfError(JsonLdException): ...
class UnknownFormat(JsonLdException): ...
class UnsupportedVersion(JsonLdException): ...
